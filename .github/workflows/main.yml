name: Notify Upcoming Deadlines

on:
  schedule:
    # 毎日特定の時刻に実行 (例: JST午前9時 = UTC午前0時)
    - cron: '0 0 * * *'
  workflow_dispatch: # 手動実行も可能にする

jobs:
  notify:
    runs-on: ubuntu-latest
    env:
      ICS_URL: ${{ secrets.ICS_URL }} # GitHub Secretsに設定したICSのURL
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }} # GitHub Secretsに設定したDiscordのWebhook URL
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # 適切なPythonバージョンを指定

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests icalendar pytz

      - name: Restore cache for notified events
        uses: actions/cache@v4
        id: cache-notified-events # ステップにIDを付与して、後で出力（cache-hit）を参照できるようにする
        with:
          path: notified.json # キャッシュするファイルのパス
          key: ${{ runner.os }}-notified-events # キャッシュキー。OSが変わることは少ないが、念のため含める

      - name: Run script to check and notify deadlines
        run: python LMS_assignment_notify.py # ここにPythonスクリプトのファイル名を入力

      # notified.json が更新された場合、または新規作成された場合にキャッシュを保存する
      # actions/cache はジョブの最後に自動で保存処理を行うが、
      # より明示的に制御したい場合や、特定の条件で保存したい場合は、
      # post ジョブステップで実行する (この例ではデフォルト_の動作に任せる)
      #
      # もし、スクリプトの実行結果に関わらず常にキャッシュを保存したい場合は、
      # 以下のステップは不要で、上記の 'Restore cache for notified events' ステップが
      # ジョブ完了時に自動的に `notified.json` を指定されたキーで保存します。
      #
      # ただし、`actions/cache`はキーに完全一致するキャッシュが存在する場合、
      # キャッシュの保存ステップをスキップします。
      # 確実に毎回上書き保存したい場合は、キーを工夫するか、
      # キャッシュアーティファクトをアップロード/ダウンロードする別の方法を検討する必要があります。
      #
      # このユースケースでは、`notified.json` の内容は蓄積されていくものなので、
      # `actions/cache` のデフォルトの挙動（キーが同じなら上書き保存）で問題ないはずです。
      # `key` が完全一致すれば、ジョブ終了時にそのキーで `path` の内容が保存されます。
